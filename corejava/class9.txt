2) Static variables
===================
A value of a variable which is not varied(changes) from object to object is called static variable.

Static variable will be created at the time of classloading and it will destroy at the time of class  unloading. Hence scope of static variable is same as scope of a .class file.

Static variables will store in method area.

Static variable must and should declare immediately after the class using static keyword, but not inside methods, blocks and constructors.

Static variable we can access from static area as well from instance area.

Static variable we can access by using object reference and class name.

ex:1
----
class Test 
{
	//static variable 
	static int i=10;
	
	public static void main(String[] args)
	{
		System.out.println(i); 	//10

		Test t=new Test();
		System.out.println(t.i); //10

		System.out.println(Test.i); //10		
	}
}

Note:
------
If we won't initialize any value to static variable then JVM will initialized default values.

ex:2
-----
class Test 
{
	//static variable 
	static String s;
	
	public static void main(String[] args)
	{
		System.out.println(s); //null

		Test t=new Test();
		System.out.println(t.s); //null

		System.out.println(Test.s); //null		
	}
}

In java, only one copy of static variable will be created which is shared to multiple objects.

ex:3
----
class Test 
{
	//static variable 
	static int i=10;
	
	public static void main(String[] args)
	{
		Test t1=new Test();
		Test t2=new Test();

		System.out.println(t1.i); // 10
		System.out.println(t2.i); // 10

		t1.i=100;
		
		System.out.println(t1.i); // 100
		System.out.println(t2.i); // 100			
	}
}

ex:4
-----
class Test 
{	
	public static void main(String[] args)
	{
		m1();

		Test t=new Test();
		t.m1();

		Test.m1();		
	}

	//static method 
	public static void m1()
	{
		System.out.println("static-method");
	}
}


3) Local variables
===================
To meet temperory requirements a programmer will declare some variables inside methods, blocks and constructors such type of variables are called local variables.

Local variable will be created as a part of execution block and it will destroy when execution block is executed.Hence scope of local variable is same scope of execution block where it is declared.

Local variables will store in java stack.

ex:1
----
class Test 
{	
	public static void main(String[] args)
	{
		//local variable 
		int i=10;
		System.out.println(i); //10		
	}
}	

Note:
-----
If we won't initialize any value to local variable JVM will not initialize any default value.

ex:2
----
class Test 
{	
	public static void main(String[] args)
	{
		//local variable 
		int i;
		System.out.println(i); //		
	}
}

o/p:
	C.T.E : variable i might not have been initialized


A local variable will accept only one modifier i.e final.


ex:3
-----
class Test 
{	
	public static void main(String[] args)
	{
		//local variable 
		final int i=10;
		System.out.println(i); // 10		
	}
}

Interview Questions 
===================

Q) What is Literal?

A value which is assigned to a variable is called literal.

A value which is not change during the program execution is called literal.

ex:
	int   i  =  10;
	 |    |     |____ value of a variable / Literal          
         |    |__________ variable name / identifier 
	 |_______________ datatype / keyword 



Q) Jack and John both are best friends in a town.One day while going to school they saw one begger.
   Both decided to help that needy person. Jack gave 100 rupees of his school fee and John gave 50  
   rupees from his pocket money.Write a java program to find out total contribution they have done to 
   assist a poor guy?

ex:
---
class Test 
{	
	public static void main(String[] args)
	{
		sum();		
	}
	//static method 
	public static void sum()
	{
		int a=100,b=50;
		int c = a + b;
		System.out.println(c); 
	}
}

If we declare the logic inside another method instead of main method then we can achieve reusability.

ex:

class Test 
{	
	public static void main(String[] args)
	{
		sum();	
		sum();	
	}
	//static method 
	public static void sum()
	{
		int a=100,b=50;
		int c = a + b;
		System.out.println(c); 
	}
}
















 












